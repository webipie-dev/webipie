on:
  push:
    branches:
      - devops
      - master

name: Project Deployment

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: webipieecr_dev
        APP_PORT: ${{ secrets.APP_PORT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_twilio_account_sid: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TF_VAR_twilio_auth_token: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TF_VAR_mongo_db_url: ${{ secrets.MONGO_DB_URL }}
        REGION: ${{ secrets.AWS_REGION }}
      run: |
        cd terraform/infrastructure
        terraform init
        terraform apply -target null_resource.index -auto-approve -lock-timeout=120s
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ../../backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend/task-definition.json
        container-name: webipie
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: webipie
        cluster: webipie
        wait-for-service-stability: true

    - name: Build and deploy front-end
      run: |
        echo "installing angular"
        npm install @angular/cli
        echo "installing dependencies"
        npm install
        echo "building project"
        npm run build
        aws s3 cp dist "s3://webipie.com" --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
        aws cloudfront create-invalidation --distribution-id E1MLM3K0KNSF88 --paths "/*"

